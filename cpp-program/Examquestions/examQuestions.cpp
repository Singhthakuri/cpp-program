// -------------------------------------------------Past Questions commes in Exam----------------------------------------------------
// write a inline function to find the cube of the box
#include <iostream>
using namespace std;
inline void finCube(int l)
{
    cout << "cube of the box is:" << l * l * l << endl;
}
int main()
{
    int l;
    cout << "Enter the length of the box: ";
    cin >> l;
    finCube(l);
    return 0;
}

// show simple example of the try and catch exceptional handling
#include <iostream>
using namespace std;
void  handler(int num)
{
    int divisor;
    cout << "Enter the divisor: ";
    cin >> divisor;
    try
    {  
        if (divisor == 0)
        {
            throw(divisor);
        }
        else
        {
            double res=num / divisor;
            cout << "Num " << num << " is divided by " << divisor <<": "<< res << endl;
        }
    }catch (int n)
{
    cout<<"Exceptional is generated by divisor: "<<n;
}
}

int main()
{
    int num;
    cout<<"Enter number you want to divide: ";
    cin>>num;
    handler(num);
    return 0;
}

// mean of two number using friend function 
#include<iostream>
using namespace std;
class A{
    private:
    int num1,num2;
    public:
    A(int first,int second):num1(first),num2(second){}
    friend void findmean(A);
};
void findmean(A s){
    cout<<"Mean of two numbers is:"<<(s.num1+s.num2)/2<<endl;
}

int main()
{
   A s(10,20),t(0,0);
   findmean(s);
    return 0;
}


// wap to show show all the access specifiers 
#include<iostream>
using namespace std;
class A{
    private:
    int grade;
    protected:
    int age;
    public:
    string name;
    A(int age,int grade):age(age),grade(grade){}
    void display(){
        cout<<"Name: "<<name<<endl;
        cout<<"age: "<<age<<endl;       //all members can access inside the methods of the class
        cout<<"grade: "<<grade<<endl;   
    }
};

class B:public A{
    public:
    void dispaly(){
      cout<<"age:"<<A::age;     //only access private and public members to the derived class
      cout<<"grade: "<<A::name;
    }
};

int main(){
    A s(10,20);
    s.name="Gajendra";   //public members only accessed to the main function
    s.display();
}

// parametrized constructor 
#include<iostream>
using namespace std;
class A{
    public:
    string name,address;
    A(string name,string address):name(name),address(address){}  //parametrized constructor
    void display(){
        cout<<"Name :"<<name<<endl;
        cout<<"address :"<<address<<endl;
    }
};

int main()
{
    A b("Gajendra","kailali");  // the constructor in which paramter is passed is called the parametrized constructor
    b.display();
}

// example question to create a class of the given name faculty and the rollno and create objects and disply 

#include<iostream>
using namespace std;
class Student{
    public:
    char name[20];
    char faculty[20];
    int roll;
    void getdata(){
        cout<<"Enter name of the student:";
        cin>>name;
           cout<<"Enter faculty of the student:";
        cin>>faculty;
           cout<<"Enter roll of the student:";
        cin>>roll;
    }

    void display(){
        cout<<"Name of the student: "<<name<<endl;
        cout<<"Faculty of the student: "<<faculty<<endl;
        cout<<"Roll of the student: "<<roll<<endl;

    }
};

int main()
{
    Student s;
    s.getdata();
    s.display();

    Student t;
    t.getdata();
    t.display();
}

// cpp program to add the time given in hours 
#include<iostream>
using namespace std;
class Timecheck{
    private:
    int hours,minutes;
    public:
    void getdata(){
        cout<<"Enter total hours: ";
        cin>>hours;
        cout<<"Enter total minutes: ";
        cin>>minutes;
    }

    void  calculateTime(Timecheck s,Timecheck t){
            hours=s.hours+t.hours;
            int newhours;
            newhours=(s.minutes+t.minutes)/60;
            hours+=newhours;
            minutes=(s.minutes+t.minutes)%60;
    }

    void display(){
        cout<<"Total no of hours: "<<hours<< " hours"<<endl;
        cout<<"Total minutes : "<<minutes<<" minutes"<<endl;
    }
};

int main()
{
    Timecheck s;
    s.getdata();

    Timecheck t;
    t.getdata();

    Timecheck u;
    u.calculateTime(s,t);
    u.display();
}

// mahendnagar book and statinary questions 

#include<iostream>
using namespace std;
class Media{
    string title;
    string publication;
    public:
   virtual void getdata(){
        cout<<"Enter the title of the Media: ";
        getline(cin,title);
        cout<<"Enter the publicaton of the Media: ";
        getline(cin,publication);
    }
    virtual void showdata(){
        cout<<"The title of the Media is :"<<title<<endl;
        cout<<"The publication of the Media is :"<<publication<<endl;
    }
};

class Book:public Media{
    int no_of_pages;
     public:
     void getdata() override{
        Media::getdata();
        cout<<"Enter the no of Pages: ";
        cin>>no_of_pages;
     }
     void showdata() override{
        Media::showdata();
        cout<<"There are only " <<no_of_pages<<"in the book"<<endl;
     }
};

class DVD:public Media{
        float duaration;
        public:
        void  getdata() override
        {       cin.ignore();
            Media::getdata();
            cout<<"Enter the duaration of the media: ";
            cin>>duaration;
        }

        void showdata() override{ 
            Media::showdata();
            cout<<"The duaration of the media is :"<<duaration<<endl;
        }
};

int main(){
   Media *pt;
   Book st;
   pt=&st;
   pt->getdata();
   pt->showdata();

   DVD d;
   pt=&d;
   pt->getdata();
   pt->showdata();
}

//  2074 11

#include<iostream>
using namespace std;
class Student{
    string name;
    int age;
    public:
    void getdata(){
        cout<<"Enter student name: ";
        getline(cin,name);
        cout<<"Enter student age: ";
        cin>>age;
    }
    void display()
    {
        cout<<"Name of the student: "<<name<<endl;
        cout<<"Age of the student : "<<age<<endl;
    }

};
class empolyee{
    string name;
    int age;
    public:
       void getdata(){
        cin.ignore();
                cout<<"Enter empolyee name: ";
        getline(cin,name);
        cout<<"Enter empolyee age: ";
        cin>>age;
    }
    void display()
    {
        cout<<"Name of the empolyee: "<<name<<endl;
        cout<<"Age of the empolyee : "<<age<<endl;
    }
};

class Manager:public Student,public empolyee{
    public:
    void getdata(){
        Student::getdata();
        empolyee::getdata();

    }

    void display(){
        Student::display();
        empolyee::display();
    }
};
int main(){
    Manager s;
    s.getdata();
    s.display();
}

Exceptional handling array bound divibe by 0
#include<iostream>
using namespace std;
void displayRes(int arr[],int size){
    int pos;
        cout<<"Enter the position where you want to :";
        cin>>pos;

        try{
             if(pos>size)
        {
            throw  string("Can't added to the index greater than array size");
        }
        int item;
        cout<<"Enter item to add in the array: "<<endl;
        cin>>item;
        arr[pos]=item;
        }catch(string msg)
        {
            cout<<msg;
        }
    }

int main()
{
    int size;
    cout<<"Enter the size of the Array: ";
    cin>>size;
    int arr[size]={};
    displayRes(arr,size);
}


//Excaptional using divide by o
#include<iostream>
using namespace std;
void display()
{
    int a,b;
    cout<<"Enter value of a and b: ";
    cin>>a>>b;
    try{
        if(b==0)
        {
            throw string("Cannot divide number by 0");
        }
        cout<<"Result of "<<a<< "divided by "<<b<< " is :"<<a/b<<endl;
    }
    catch(string msg){
        cout<<msg<<endl;
    }
} 

int main()
{
    display();
}